# -*- coding: utf-8 -*-
"""assignment01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PWk7Qvr-kXEOiZ7cbgVCEWqeLvGC5877
"""

import numpy as np
from sklearn.metrics import r2_score

#Gradient descent regression
def descent(X,Y,theta,learning_Rate,iterations):
  m=len(Y)
  for iter in range(iterations):
    prediction = np.dot(X,theta);
    theta = theta - (learning_Rate*(1/m) * np.dot(X.T, prediction-Y))
  return theta

#Caculates the Mean square error of X, Y, and theta
def MSE(X,Y,theta):
  prediction = np.dot(X,theta)
  return np.mean((Y-prediction)**2)

#variables
learning_Rate=0.000000007
iterations=5

#training data
URL="https://raw.githubusercontent.com/Bondzberg/data/main/trainingdata.csv"
traindata=np.genfromtxt(URL, delimiter=',',skip_header=1)
trainX=traindata[:, :7]
trainY=traindata[:, -1]

#test data
URL="https://raw.githubusercontent.com/Bondzberg/data/main/testdata.csv"
testdata=np.genfromtxt(URL, delimiter=',',skip_header=1)
testX=testdata[:, :7]
testY=testdata[:, -1]

#intial guess
theta=np.zeros(7)

#trains the model and prints the outputs
def start():
  trainedTheta = descent(trainX,trainY,theta,learning_Rate,iterations)
  print("Training data:")
  print("MSE: " ,  MSE(trainX,trainY,trainedTheta))
  print("R^2: ",r2_score(trainY, np.dot(trainX,trainedTheta)))

  print("Test data:")
  print("MSE: ",  MSE(testX,testY,trainedTheta))
  print("R^2: ",r2_score(testY, np.dot(testX,trainedTheta)))

start()

from sklearn import linear_model
import numpy as np
from sklearn.metrics import mean_squared_error
from sklearn.metrics import r2_score

#variables
learning_Rate=0.000000001
iterations=1000

#data
URL="https://raw.githubusercontent.com/Bondzberg/data/main/trainingdata.csv"
traindata=np.genfromtxt(URL, delimiter=',',skip_header=1)
trainX=traindata[:, :7]
trainY=traindata[:, -1]

URL="https://raw.githubusercontent.com/Bondzberg/data/main/testdata.csv"
testdata=np.genfromtxt(URL, delimiter=',',skip_header=1)
testX=testdata[:, :7]
testY=testdata[:, -1]

def train():
  model = linear_model.SGDRegressor(alpha=0.1, eta0=learning_Rate, max_iter = iterations, tol = 0.000001)
  model.fit(trainX, trainY)
  prediction = model.predict(trainX)
  mse = mean_squared_error(trainY, prediction)
  print("Training data:")
  print("MSE: " ,  mean_squared_error(trainY,prediction))
  print("R^2: ",r2_score(trainY, prediction))

  prediction = model.predict(testX)
  print("Test data:")
  print("MSE: " ,  mean_squared_error(testY,prediction))
  print("R^2: ",r2_score(testY, prediction))

train()